(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['svelte-geolocation'] = {}));
}(this, (function (exports) { 'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    /* src/Geolocation.svelte generated by Svelte v3.44.0 */

    const get_default_slot_changes = dirty => ({
    	loading: dirty & /*loading*/ 1,
    	success: dirty & /*success*/ 8,
    	error: dirty & /*error*/ 2,
    	notSupported: dirty & /*notSupported*/ 16,
    	coords: dirty & /*coords*/ 4
    });

    const get_default_slot_context = ctx => ({
    	loading: /*loading*/ ctx[0],
    	success: /*success*/ ctx[3],
    	error: /*error*/ ctx[1],
    	notSupported: /*notSupported*/ ctx[4],
    	coords: /*coords*/ ctx[2]
    });

    function create_fragment(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], get_default_slot_context);

    	return {
    		c() {
    			if (default_slot) default_slot.c();
    		},
    		m(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope, loading, success, error, notSupported, coords*/ 8223)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[13],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	let { coords = [-1, -1] } = $$props;
    	let { position = {} } = $$props;
    	let { options = {} } = $$props;
    	let { getPosition = false } = $$props;
    	let { watch = false } = $$props;
    	let { loading = false } = $$props;
    	let { success = false } = $$props;
    	let { error = false } = $$props;
    	let { notSupported = false } = $$props;

    	async function watchPosition(opts) {
    		$$invalidate(4, notSupported = false);
    		$$invalidate(0, loading = true);
    		$$invalidate(1, error = false);

    		if (!("geolocation" in navigator)) {
    			$$invalidate(4, notSupported = true);
    		} else {
    			if (watcherId) await clearWatcher(watcherId);
    			$$invalidate(12, watcherId = navigator.geolocation.watchPosition(handlePosition, handleError, opts));
    			return watcherId;
    		}
    	}

    	async function getGeolocationPosition(opts) {
    		$$invalidate(4, notSupported = false);
    		$$invalidate(0, loading = true);
    		$$invalidate(1, error = false);

    		if (!("geolocation" in navigator)) {
    			$$invalidate(4, notSupported = true);
    		} else {
    			navigator.geolocation.getCurrentPosition(handlePosition, handleError, opts);
    		}
    	}

    	async function clearWatcher(watcherId) {
    		if (!("geolocation" in navigator)) {
    			$$invalidate(4, notSupported = true);
    		} else {
    			navigator.geolocation.clearWatch(watcherId);
    			watcherId = undefined;
    		}
    	}

    	const dispatch = createEventDispatcher();

    	/** @type {number | undefined} */
    	let watcherId = undefined;

    	/** @type {GeolocationPosition | undefined} */
    	let lastPosition = undefined;

    	/** @type {(position: GeolocationPosition) => void} */
    	function handlePosition(pos) {
    		$$invalidate(2, coords = [pos.coords.longitude, pos.coords.latitude]);

    		$$invalidate(5, position = {
    			coords: {
    				accuracy: pos.coords.accuracy,
    				altitude: pos.coords.altitude,
    				altitudeAccuracy: pos.coords.altitudeAccuracy,
    				heading: pos.coords.heading,
    				latitude: pos.coords.latitude,
    				longitude: pos.coords.longitude,
    				speed: pos.coords.speed
    			},
    			timestamp: pos.timestamp
    		});

    		if (!lastPosition || lastPosition.coords.latitude !== pos.coords.latitude || lastPosition.coords.longitude !== pos.coords.longitude) {
    			lastPosition = pos;
    			dispatch("position", position);
    		}

    		$$invalidate(0, loading = false);
    	}

    	/** @type {(error: GeolocationError) => void;} */
    	function handleError(err) {
    		dispatch("error", err);
    		$$invalidate(1, error = err);
    		$$invalidate(0, loading = false);
    	}

    	onDestroy(() => {
    		if (watcherId) clearWatcher(watcherId);
    	});

    	$$self.$$set = $$props => {
    		if ('coords' in $$props) $$invalidate(2, coords = $$props.coords);
    		if ('position' in $$props) $$invalidate(5, position = $$props.position);
    		if ('options' in $$props) $$invalidate(6, options = $$props.options);
    		if ('getPosition' in $$props) $$invalidate(7, getPosition = $$props.getPosition);
    		if ('watch' in $$props) $$invalidate(8, watch = $$props.watch);
    		if ('loading' in $$props) $$invalidate(0, loading = $$props.loading);
    		if ('success' in $$props) $$invalidate(3, success = $$props.success);
    		if ('error' in $$props) $$invalidate(1, error = $$props.error);
    		if ('notSupported' in $$props) $$invalidate(4, notSupported = $$props.notSupported);
    		if ('$$scope' in $$props) $$invalidate(13, $$scope = $$props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*getPosition, watch, options*/ 448) {
    			if (typeof window !== "undefined" && getPosition && watch) watchPosition(options);
    		}

    		if ($$self.$$.dirty & /*getPosition, watch, options*/ 448) {
    			if (typeof window !== "undefined" && getPosition && !watch) getGeolocationPosition(options);
    		}

    		if ($$self.$$.dirty & /*getPosition, loading, error*/ 131) {
    			$$invalidate(3, success = getPosition && !loading && !error);
    		}

    		if ($$self.$$.dirty & /*getPosition, watch, watcherId*/ 4480) {
    			if ((!getPosition || !watch) && watcherId) clearWatcher(watcherId);
    		}
    	};

    	return [
    		loading,
    		error,
    		coords,
    		success,
    		notSupported,
    		position,
    		options,
    		getPosition,
    		watch,
    		watchPosition,
    		getGeolocationPosition,
    		clearWatcher,
    		watcherId,
    		$$scope,
    		slots
    	];
    }

    class Geolocation extends SvelteComponent {
    	constructor(options) {
    		super();

    		init(this, options, instance, create_fragment, safe_not_equal, {
    			coords: 2,
    			position: 5,
    			options: 6,
    			getPosition: 7,
    			watch: 8,
    			loading: 0,
    			success: 3,
    			error: 1,
    			notSupported: 4,
    			watchPosition: 9,
    			getGeolocationPosition: 10,
    			clearWatcher: 11
    		});
    	}

    	get watchPosition() {
    		return this.$$.ctx[9];
    	}

    	get getGeolocationPosition() {
    		return this.$$.ctx[10];
    	}

    	get clearWatcher() {
    		return this.$$.ctx[11];
    	}
    }

    exports.default = Geolocation;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
